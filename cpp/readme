attribut => variable membre d'une classe 
methode => fonction membre d'une classe

constructeur => methode a la creation d'une instance de classe
destructeur => methode a la destruction d'une instance de classe

instance => objet cree a partir d'une classe

tableau de pointeur sur des fonctions membres de Harl:
void (Harl::* harlptr[])(void) = 
{&Harl::debug, &Harl::info, &Harl::warning, &Harl::error};

la surcharge d'operateur syntaxe :

Fixed & operator=(Fixed const & value);
=> pas de const en retour car je modifie la valeur de l'instance courante
=> le retour Fixed permet de retourner l'instance courante
=> je retourne donc une reference

const std::string &getType() const;

=> ceci permet de retourner le type  
=> quand je retourne une reference sur un prototype de const
    je suis oblige de retourner une reference constante
    Car sinon je casse la promesse de ma methode constante
    car je passe une reference non constatne a un autre objet 
        qui lui pourra la modifier